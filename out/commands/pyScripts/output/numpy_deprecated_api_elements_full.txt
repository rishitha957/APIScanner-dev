numpy.core.array2string(): ~ .. deprecated:: 1.14.0 formatter : dict of callables, optional if not none, the keys should indicate the type(s) that the respective formatting function applies to. callables should return a string. types that are not specified (by their corresponding keys) are handled by the default formatters. individual types for which a formatter can be set are:, ./numpy/numpy/core/arrayprint.py
numpy.core.diagonal(): ~in numpy 1.7 and 1.8, it continues to return a copy of the diagonal, but depending on this fact is deprecated. writing to the resulting array continues to work as it used to, but a futurewarning is issued., ./numpy/numpy/core/fromnumeric.py
numpy.core.nonzero(): ~ .. deprecated:: 1.17.0, ./numpy/numpy/core/fromnumeric.py
numpy.core.alen(): ~.. deprecated:: 1.18 `numpy.alen` is deprecated, use `len` instead., ./numpy/numpy/core/fromnumeric.py
numpy.core.binary_repr(): ~ if the `width` value is insufficient, it will be ignored, and `num` will be returned in binary (`num` > 0) or two's complement (`num` < 0) form with its width equal to the minimum number of bits needed to represent the number in the designated form. this behavior is deprecated and will later raise an error. .. deprecated:: 1.12.0, ./numpy/numpy/core/numeric.py
numpy.core._display_as_base(): ~classes decorated with this decorator are subject to removal without a deprecation warning., ./numpy/numpy/core/_exceptions.py
numpy.distutils.exec_command(): ~.. deprecated:: 1.17 use subprocess.popen instead, ./numpy/numpy/distutils/exec_command.py
numpy.lib.corrcoef(): ~ .. deprecated:: 1.10.0 ddof : _novalue, optional has no effect, do not use. .. deprecated:: 1.10.0 dtype : data-type, optional data-type of the result. by default, the return data-type will have at least `numpy.float64` precision., ./numpy/numpy/lib/function_base.py
numpy.lib.histogram(): ~ .. deprecated:: 1.6.0 .. versionchanged:: 1.15.0 deprecationwarnings are actually emitted., ./numpy/numpy/lib/histograms.py
numpy.lib.ndindex.ndincr(): ~.. deprecated:: 1.20.0 this method has been advised against since numpy 1.8.0, but only started emitting deprecationwarning as of this version., ./numpy/numpy/lib/index_tricks.py
numpy.lib.ndfromtxt(): ~.. deprecated:: 1.17 ndfromtxt` is a deprecated alias of `genfromtxt` which overwrites the ``usemask`` argument with `false` even when explicitly called as ``ndfromtxt(..., usemask=true)``. use `genfromtxt` instead., ./numpy/numpy/lib/npyio.py
numpy.lib.mafromtxt(): ~.. deprecated:: 1.17 np.mafromtxt is a deprecated alias of `genfromtxt` which overwrites the ``usemask`` argument with `true` even when explicitly called as ``mafromtxt(..., usemask=false)``. use `genfromtxt` instead., ./numpy/numpy/lib/npyio.py
numpy.lib.expand_dims(): ~ .. deprecated:: 1.13.0 passing an axis where ``axis > a.ndim`` will be treated as ``axis == a.ndim``, and passing ``axis < -a.ndim - 1`` will be treated as ``axis == 0``. this behavior is deprecated., ./numpy/numpy/lib/shape_base.py
numpy.lib.broadcast_arrays(): ~ .. deprecated:: 1.17 the output is currently marked so that if written to, a deprecation warning will be emitted. a future version will set the ``writable`` flag false so writing to it will raise an error., ./numpy/numpy/lib/stride_tricks.py
numpy.lib.asscalar(): ~.. deprecated:: 1.16 deprecated, use `numpy.ndarray.item()` instead., ./numpy/numpy/lib/type_check.py
numpy.lib._deprecate_out_named_y(): ~allow the out argument to be passed as the name `y` (deprecated), ./numpy/numpy/lib/ufunclike.py
numpy.lib._fix_out_named_y(): ~allow the out argument to be passed as the name `y` (deprecated) this decorator should only be used if _deprecate_out_named_y is used on a corresponding dispatcher function., ./numpy/numpy/lib/ufunclike.py
numpy.lib._dispatcher(): @_deprecate_out_named_y, ./numpy/numpy/lib/ufunclike.py
numpy.lib.fix(): @_fix_and_maybe_deprecate_out_named_y, ./numpy/numpy/lib/ufunclike.py
numpy.lib.isposinf(): @_fix_and_maybe_deprecate_out_named_y, ./numpy/numpy/lib/ufunclike.py
numpy.lib.isneginf(): @_fix_and_maybe_deprecate_out_named_y, ./numpy/numpy/lib/ufunclike.py
numpy.lib._Deprecate: ~decorator class to deprecate old functions. refer to `deprecate` for details. see also -------- deprecate, ./numpy/numpy/lib/utils.py
numpy.lib.deprecate(): ~issues a deprecationwarning, adds warning to `old_name`'s docstring, rebinds ``old_name.__name__`` and returns the new function object. parameters ---------- func : function the function to be deprecated. old_name : str, optional the name of the function to be deprecated. default is none, in which case the name of `func` is used. new_name : str, optional the new name for the function. default is none, in which case the deprecation message is that `old_name` is deprecated. if given, the deprecation message is that `old_name` is deprecated and `new_name` should be used instead. message : str, optional additional explanation of the deprecation. displayed in the docstring after the warning. returns ------- old_func : function the deprecated function. examples -------- note that ``olduint`` returns a value after printing deprecation warning: >>> olduint = np.deprecate(np.uint) deprecationwarning: `uint64` is deprecated! # may vary >>> olduint(6) 6, ./numpy/numpy/lib/utils.py
numpy.lib._Deprecate.newfunc(): ~`arrayrange` is deprecated, use `arange` instead!, ./numpy/numpy/lib/utils.py
numpy.linalg.qr(): ~ the options 'reduced', 'complete, and 'raw' are new in numpy 1.8, see the notes for more information. the default is 'reduced', and to maintain backward compatibility with earlier versions of numpy both it and the old default 'full' can be omitted. note that array h returned in 'raw' mode is transposed for calling fortran. the 'economic' mode is deprecated. the modes 'full' and 'economic' may be passed using only the first letter for backwards compatibility, but all others must be spelled out. see the notes for more explanation. returns ------- q : ndarray of float or complex, optional a matrix with orthonormal columns. when mode = 'complete' the result is an orthogonal/unitary matrix depending on whether or not a is real/complex. the determinant may be either +/- 1 in that case. r : ndarray of float or complex, optional the upper-triangular matrix. (h, tau) : ndarrays of np.double or np.cdouble, optional the array h contains the householder reflectors that generate q along with r. the tau array contains scaling factors for the reflectors. in the deprecated 'economic' mode only h is returned. new 'reduced', 'complete', and 'raw' options for mode were added in numpy 1.8.0 and the old option 'full' was made an alias of 'reduced'. in addition the options 'full' and 'economic' were deprecated. because 'full' was the previous default and 'reduced' is the new default, backward compatibility can be maintained by letting `mode` default. the 'raw' option was added so that lapack routines that can multiply arrays by q using the householder reflectors can be used. note that in this case the returned arrays are of type np.double or np.cdouble and the h array is transposed to be fortran compatible. no routines using the 'raw' return are currently exposed by numpy, but some are available in lapack_lite and just await the necessary work., ./numpy/numpy/linalg/linalg.py
numpy.ma.MaskedArray.resize(): ~this method is difficult to implement safely and may be deprecated in future releases of numpy., ./numpy/numpy/ma/core.py
numpy.ma.MaskedArray.mini(): ~.. deprecated:: 1.13.0 this function is identical to both:, ./numpy/numpy/ma/core.py
numpy.ma.MaskedArray.tostring(): ~.. deprecated:: 1.19.0, ./numpy/numpy/ma/core.py
numpy.ma.corrcoef(): ~ .. deprecated:: 1.10.0 allow_masked : bool, optional if true, masked values are propagated pair-wise: if a value is masked in `x`, the corresponding value is masked in `y`. if false, raises an exception. because `bias` is deprecated, this argument needs to be treated as keyword only to avoid a warning. ddof : _novalue, optional has no effect, do not use. .. deprecated:: 1.10.0, ./numpy/numpy/ma/extras.py
numpy.polynomial.PolyBase: ~deprecated in numpy 1.9.0, use the abstract abcpolybase class instead. note that the latter requires a number of virtual functions to be implemented., ./numpy/numpy/polynomial/polyutils.py
numpy.polynomial._deprecate_as_int(): ~like `operator.index`, but emits a deprecation warning when passed a float raises ------ typeerror : if x is a non-integral float or non-numeric deprecationwarning : if x is an integral float, ./numpy/numpy/polynomial/polyutils.py
numpy.testing._private.deprecated(): ~filter deprecation warnings while running the test suite. this decorator can be used to filter deprecationwarning's, to avoid printing them during the test suite run, while checking that the test actually raises a deprecationwarning. parameters ---------- conditional : bool or callable, optional flag to determine whether to mark test as deprecated or not. if the condition is a callable, it is used at runtime to dynamically make the decision. default is true. returns ------- decorator : function the `deprecated` decorator itself. warn - DeprecationWarning, ./numpy/numpy/testing/_private/decorators.py
numpy.testing._private.deprecate_decorator():  warn - DeprecationWarning, ./numpy/numpy/testing/_private/decorators.py
numpy.testing._private._deprecated_imp():  warn - DeprecationWarning, ./numpy/numpy/testing/_private/decorators.py
numpy.testing._private.NoseTester.test():  warn - ignore.*getargspec.*nose\.DeprecationWarning, ./numpy/numpy/testing/_private/nosetester.py
numpy.testing._private.suppress_warnings: ~ with np.testing.suppress_warnings() as sup: sup.filter(deprecationwarning, "some text") sup.filter(module=np.ma.core) log = sup.record(futurewarning, "does this occur?") command_giving_warnings() # the futurewarning was given once, the filtered warnings were # ignored. all other warnings abide outside settings (may be # printed/error) assert_(len(log) == 1) assert_(len(sup.log) == 1) # also stored in log attribute, ./numpy/numpy/testing/_private/utils.py
numpy.testing._private.assert_warns(): ~examples -------- >>> import warnings >>> def deprecated_func(num): ... warnings.warn("please upgrade", deprecationwarning) ... return num*num >>> with np.testing.assert_warns(deprecationwarning): ... assert deprecated_func(4) == 16 >>> # or passing a func >>> ret = np.testing.assert_warns(deprecationwarning, deprecated_func, 4) >>> assert ret == 16, ./numpy/numpy/testing/_private/utils.py
numpy.ModuleDeprecationWarning: ~module deprecation warning. the nose tester turns ordinary deprecation warnings into test failures. that makes it hard to deprecate whole modules, because they get imported by default. so this is a special deprecation warning that the nose tester will let pass without making tests fail., ./numpy/numpy/_globals.py
numpy.VisibleDeprecationWarning: ~visible deprecation warning. by default, python will not show deprecation warnings, so this class can be used when a very visible warning is helpful, for example because the usage is most likely a user bug., ./numpy/numpy/_globals.py
numpy._NoValueType: ~the instance of this class may be used as the default value assigned to a deprecated keyword in order to check if it has been given a user defined value., ./numpy/numpy/_globals.py
