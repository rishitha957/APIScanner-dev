_default_contains(): ~1. if the artist defines a custom checker, use it (deprecated). 2. if the artist figure is known and the event did not occur in that figure (by checking its ``canvas`` attribute), reject it. 3. otherwise, return `none, {}`, indicating that the subclass' implementation should be used.
set_contains(): @cbook.deprecated # set_picker
get_contains(): @cbook.deprecated # get_picker
set_picker(): ~ - *deprecated*: for `.line2d` only, *picker* can also be a float that sets the tolerance for checking whether an event occurred "on" the line; this is deprecated. use `.line2d.set_pickradius` instead.
stem(): ~use_line_collection : bool, default: true if ``true``, store and plot the stem lines as a `~.collections.linecollection` instead of individual lines, which significantly increases performance. if ``false``, defaults to the old behavior of using a list of `.line2d` objects. this parameter may be deprecated in the future.
pie(): ~ please note that the previous default value of *none* is now deprecated, and the default will change to *true* in the next release. please pass ``normalize=false`` explicitly if you want to draw a partial pie.
boxplot(): ~ if a pair of floats, they indicate the percentiles at which to draw the whiskers (e.g., (5, 95)). in particular, setting this to (0, 100) results in whiskers covering the whole range of the data. "range" is a deprecated synonym for (0, 100).
scatter(): ~vmin, vmax : float, default: none *vmin* and *vmax* are used in conjunction with the default norm to map the color array *c* to the colormap *cmap*. if none, the respective min and max of the color array is used. it is deprecated to use *vmin*/*vmax* when *norm* is given.
hexbin(): ~vmin, vmax : float, default: none the colorbar range. if *none*, suitable min/max values are automatically chosen by the `~.normalize` instance (defaults to the respective min/max values of the bins in case of the default linear scaling). it is deprecated to use *vmin*/*vmax* when *norm* is given.
imshow(): ~vmin, vmax : float, optional when using scalar data and no explicit *norm*, *vmin* and *vmax* define the data range that the colormap covers. by default, the colormap covers the complete value range of the supplied data. it is deprecated to use *vmin*/*vmax* when *norm* is given. when using rgb(a) data, parameters *vmin*/*vmax* are ignored.
pcolor(): ~ - 'flat': a solid color is used for each quad. the color of the quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by ``c[i, j]``. the dimensions of *x* and *y* should be one greater than those of *c*; if they are the same as *c*, then a deprecation warning is raised, and the last row and column of *c* are dropped. - 'nearest': each grid point will have a color centered on it, extending halfway between the adjacent grid centers. the dimensions of *x* and *y* must be the same as *c*. - 'auto': choose 'flat' if dimensions of *x* and *y* are one larger than *c*. choose 'nearest' if dimensions are the same. vmin, vmax : float, default: none the colorbar range. if *none*, suitable min/max values are automatically chosen by the `~.normalize` instance (defaults to the respective min/max values of *c* in case of the default linear scaling). it is deprecated to use *vmin*/*vmax* when *norm* is given.
pcolormesh(): ~vmin, vmax : float, default: none the colorbar range. if *none*, suitable min/max values are automatically chosen by the `~.normalize` instance (defaults to the respective min/max values of *c* in case of the default linear scaling). it is deprecated to use *vmin*/*vmax* when *norm* is given. - 'flat': a solid color is used for each quad. the color of the quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by ``c[i, j]``. the dimensions of *x* and *y* should be one greater than those of *c*; if they are the same as *c*, then a deprecation warning is raised, and the last row and column of *c* are dropped. - 'nearest': each grid point will have a color centered on it, extending halfway between the adjacent grid centers. the dimensions of *x* and *y* must be the same as *c*. - 'gouraud': each quad will be gouraud shaded: the color of the corners (i', j') are given by ``c[i', j']``. the color values of the area in between is interpolated from the corner values. the dimensions of *x* and *y* must be the same as *c*. when gouraud shading is used, *edgecolors* is ignored. - 'auto': choose 'flat' if dimensions of *x* and *y* are one larger than *c*. choose 'nearest' if dimensions are the same.
pcolorfast(): ~vmin, vmax : float, default: none the colorbar range. if *none*, suitable min/max values are automatically chosen by the `~.normalize` instance (defaults to the respective min/max values of *c* in case of the default linear scaling). it is deprecated to use *vmin*/*vmax* when *norm* is given.
get_data_ratio_log(): @cbook.deprecated # 3.2
update_datalim_bounds(): @cbook.deprecated # ax.dataLim.set(Bbox.union([ax.dataLim, bounds]))
get_geometry(): @cbook.deprecated # (get_subplotspec returns a SubplotSpec instance.)
change_geometry(): @cbook.deprecated # set_subplotspec
figbox(): @cbook.deprecated # get_subplotspec().get_position(self.figure)
numRows(): @cbook.deprecated # get_gridspec().nrows
numCols(): @cbook.deprecated # get_gridspec().ncols
update_params(): @cbook.deprecated # 3.4
rowNum(): @cbook.deprecated # ax.get_subplotspec().rowspan.start
colNum(): @cbook.deprecated # ax.get_subplotspec().colspan.start
is_first_row(): @cbook.deprecated # ax.get_subplotspec().is_first_row()
is_last_row(): @cbook.deprecated # ax.get_subplotspec().is_last_row()
is_first_col(): @cbook.deprecated # ax.get_subplotspec().is_first_col()
is_last_col(): @cbook.deprecated # ax.get_subplotspec().is_last_col()
cla(): @cbook.deprecated # Axis.clear()
set_smart_bounds(): @cbook.deprecated # 3.2
get_smart_bounds(): @cbook.deprecated # 3.2
pan(): @cbook.deprecated # 3.3
zoom(): @cbook.deprecated # 3.3
get_content_extents(): @cbook.deprecated # 3.4
tostring_rgba_minimized(): @cbook.deprecated # 3.4
print_jpg(): ~other parameters ---------------- quality : int, default: :rc:`savefig.jpeg_quality` the image quality, on a scale from 1 (worst) to 95 (best). values above 95 should be avoided; 100 disables portions of the jpeg compression algorithm, and results in large files with hardly any gain in image quality. this parameter is deprecated. optimize : bool, default: false whether the encoder should make an extra pass over the image in order to select optimal encoder settings. this parameter is deprecated. progressive : bool, default: false whether the image should be stored as a progressive jpeg file. this parameter is deprecated. pil_kwargs : dict, optional additional keyword arguments that are passed to `pil.image.image.save` when saving the figure. these take precedence over *quality*, *optimize* and *progressive*.
_renderer_init(): @cbook.deprecated # __init__
used_characters(): @cbook.deprecated # 3.3
mathtext_parser(): @cbook.deprecated # 3.4
track_characters(): @cbook.deprecated # 3.3
merge_used_characters(): @cbook.deprecated # 3.3
latex_stdin_utf8(): @cbook.deprecated # 3.3
remaining_tmpdirs(): @cbook.deprecated # 3.4
add(): @cbook.deprecated # 3.4
cleanup_remaining_tmpdirs(): @cbook.deprecated # 3.4
track_characters(): @cbook.deprecated # 3.3
merge_used_characters(): @cbook.deprecated # 3.3
parent(): @cbook.deprecated # self.canvas.setParent()
basedir(): @cbook.deprecated # os.path.join(mpl.get_data_path(), 'images')
mathtext_parser(): @cbook.deprecated # 3.4
DEBUG_MSG(): @cbook.deprecated # 3.3
get_gc(): @cbook.deprecated # .gc
get_canvas(): @cbook.deprecated # 3.4
draw_path_collection(): ~*offset_position* may be either "screen" or "data" depending on the space that the offsets are in; "data" is deprecated.
remove_callback(): ~*args* and *kwargs* are optional and used to distinguish between copies of the same function registered to be called with different arguments. this behavior is deprecated. in the future, ``*args, **kwargs`` won't be considered anymore; to keep a specific callback removable by itself, pass it to `add_callback` as a `functools.partial` object.
get_window_title(): @cbook.deprecated # manager.get_window_title or GUI-specific methods
set_window_title(): @cbook.deprecated # manager.set_window_title or GUI-specific methods
_init_toolbar(): @cbook.deprecated # __init__
press(): @cbook.deprecated # 3.3
release(): @cbook.deprecated # 3.3
draw(): @cbook.deprecated # toolbar.canvas.draw_idle()
refresh_locators(): @cbook.deprecated # self.figure.canvas.draw_idle()
make_path_regular(): @cbook.deprecated # Path.cleaned() and remove the final STOP if needed
concatenate_paths(): @cbook.deprecated # Path.make_compound_path()
MatplotlibDeprecationWarning: ~a class for issuing deprecation warnings for matplotlib users. in light of the fact that python builtin deprecationwarnings are ignored by default as of python 2.7 (see link below), this class was put in to allow for the signaling of deprecation, but via userwarnings which are not ignored by default.
_deprecate_privatize_attribute: ~helper to deprecate public access to an attribute. class foo: attr = _deprecate_privatize_attribute(*args, **kwargs) where *all* parameters are forwarded to `deprecated`. this form makes ``attr`` a property which forwards access to ``self._attr`` (same name but with a leading underscore), with a deprecation warning. note that the attribute name is derived from *the name this helper is assigned to*.
warn_deprecated(): ~display a standardized deprecation. parameters ---------- since : str the release at which this api became deprecated. message : str, optional override the default deprecation message. the ``%(since)s``, ``%(name)s``, ``%(alternative)s``, ``%(obj_type)s``, ``%(addendum)s``, and ``%(removal)s`` format specifiers will be replaced by the values of the respective arguments passed to this function. name : str, optional the name of the deprecated object. alternative : str, optional an alternative api that the user may use in place of the deprecated api. the deprecation warning will tell the user about this alternative if provided. pending : bool, optional if true, uses a pendingdeprecationwarning instead of a deprecationwarning. cannot be used together with *removal*. obj_type : str, optional the object type being deprecated. # to warn of the deprecation of "matplotlib.name_of_module" warn_deprecated('1.4.0', name='matplotlib.name_of_module', obj_type='module') warn - MatplotlibDeprecationWarning
deprecated(): ~decorator to mark a function, a class, or a property as deprecated. when deprecating a classmethod, a staticmethod, or a property, the ``@deprecated`` decorator should go *under* ``@classmethod`` and ``@staticmethod`` (i.e., `deprecated` should directly decorate the underlying callable), but *over* ``@property``. when deprecating a class ``c`` intended to be used as a base class in a multiple inheritance hierarchy, ``c`` *must* define an ``__init__`` method (if ``c`` instead inherited its ``__init__`` from its own base class, then ``@deprecated`` would mess up ``__init__`` inheritance when installing its own (deprecation-emitting) ``c.__init__``). parameters ---------- since : str the release at which this api became deprecated. message : str, optional override the default deprecation message. the ``%(since)s``, ``%(name)s``, ``%(alternative)s``, ``%(obj_type)s``, ``%(addendum)s``, and ``%(removal)s`` format specifiers will be replaced by the values of the respective arguments passed to this function. name : str, optional the name used in the deprecation message; if not provided, the name is automatically determined from the deprecated object. alternative : str, optional an alternative api that the user may use in place of the deprecated api. the deprecation warning will tell the user about this alternative if provided. pending : bool, optional if true, uses a pendingdeprecationwarning instead of a deprecationwarning. cannot be used together with *removal*. obj_type : str, optional the object type being deprecated; by default, 'class' if decorating a class, 'attribute' if decorating a property, 'function' otherwise. @deprecated('1.4.0') def the_function_to_deprecate(): pass
_rename_parameter(): ~the actual implementation of *func* should use *new*, not *old*. if *old* is passed to *func*, a deprecationwarning is emitted, and its value is used, even if *new* is also passed by keyword (this is to simplify pyplot wrapper functions, which always pass *new* explicitly to the axes method). if *new* is also passed but positionally, a typeerror will be raised by the underlying function during argument binding.
_delete_parameter(): ~decorator indicating that parameter *name* of *func* is being deprecated. parameters that come after the deprecated parameter effectively become keyword-only (as they cannot be passed positionally without triggering the deprecationwarning on the deprecated parameter), and should be marked as such after the deprecation period has passed and the deprecated parameter is removed. parameters other than *since*, *name*, and *func* are keyword-only and forwarded to `.warn_deprecated`.
_make_keyword_only(): ~decorator indicating that passing parameter *name* (or any of the following ones) positionally to *func* is being deprecated.
_deprecate_method_override(): ~return ``obj.method`` with a deprecation if it was overridden, else none. parameters ---------- method an unbound method, i.e. an expression of the form ``class.method_name``. remember that within the body of a method, one can always use ``__class__`` to refer to the class that is currently being defined. obj either an object of the class where *method* is defined, or a subclass of that class. allow_empty : bool, default: false whether to allow overrides by "empty" methods without emitting a warning. **kwargs additional parameters passed to `warn_deprecated` to generate the deprecation warning; must at least include the "since" key.
local_over_kwdict(): @deprecated. # normalize_kwargs
get_realpath_and_stat(): @deprecated. # os.path.realpath and os.stat
boxplot_stats(): ~ if a pair of floats, they indicate the percentiles at which to draw the whiskers (e.g., (5, 95)). in particular, setting this to (0, 100) results in whiskers covering the whole range of the data. "range" is a deprecated synonym for (0, 100).
normalize_kwargs(): ~required : list of str, optional a list of keys that must be in *kws*. this parameter is deprecated. forbidden : list of str, optional a list of keys which may not be in *kw*. this parameter is deprecated. allowed : list of str, optional a list of allowed fields. if this not none, then raise if *kw* contains any keys not in the union of *required* and *allowed*. to allow only the required fields pass in an empty tuple ``allowed=()``. this parameter is deprecated.
_DeprecatedCmapDictWrapper: ~dictionary mapping for deprecated _cmap_d access.
register_cmap(): ~notes ----- registering a colormap stores a reference to the colormap object which can currently be modified and inadvertantly change the global colormap state. this behavior is deprecated and in matplotlib 3.5 the registered colormap will be immutable.
add_checker(): @cbook.deprecated # 3.3
check_update(): @cbook.deprecated # 3.3
Collection: ~ where *onoffseq* is an even length tuple of on and off ink lengths in points. for examples, see :doc:`/gallery/lines_bars_and_markers/linestyles`. capstyle : str, default: :rc:`patch.capstyle` style to use for capping lines for all paths in the collection. see :doc:`/gallery/lines_bars_and_markers/joinstyle` for a demonstration of each of the allowed values. joinstyle : str, default: :rc:`patch.joinstyle` style to use for joining lines for all paths in the collection. see :doc:`/gallery/lines_bars_and_markers/joinstyle` for a demonstration of each of the allowed values. antialiaseds : bool or list of bool, default: :rc:`patch.antialiased` whether each pach in the collection should be drawn with antialiasing. offsets : (float, float) or list thereof, default: (0, 0) a vector by which to translate each patch after rendering (default is no translation). the translation is performed in screen (pixel) coordinates (i.e. after the artist's transform is applied). transoffset : `~.transforms.transform`, default: `.identitytransform` a single transform which will be applied to each *offsets* vector before it is used. offset_position : {'screen' (default), 'data' (deprecated)} if set to 'data' (deprecated), *offsets* will be treated as if it is in data coordinates instead of in screen coordinates. norm : `~.colors.normalize`, optional forwarded to `.scalarmappable`. the default of ``none`` means that the first draw call will set ``vmin`` and ``vmax`` using the minimum and maximum values of the data. cmap : `~.colors.colormap`, optional forwarded to `.scalarmappable`. the default of ``none`` will result in :rc:`image.cmap` being used. hatch : str, optional hatching pattern to use in filled paths, if any. valid strings are ['/', '\', '|', '-', '+', 'x', 'o', 'o', '.', '*']. see :doc:`/gallery/shapes_and_collections/hatch_style_reference` for the meaning of each hatch type. pickradius : float, default: 5.0 if ``pickradius <= 0``, then `.collection.contains` will return ``true`` whenever the test point is inside of one of the polygons formed by the control points of a path in the collection. on the other hand, if it is greater than 0, then we instead check if the test point is contained in a stroke of width ``2*pickradius`` following any of the paths in the collection. urls : list of str, default: none a url for each patch to link to once drawn. currently only works for the svg backend. see :doc:`/gallery/misc/hyperlinks_sgskip` for examples. zorder : float, default: 1 the drawing order, shared by all patches in the collection. see :doc:`/gallery/misc/zorder_demo` for all defaults and examples.
set_offset_position(): @cbook.deprecated # 3.3
get_offset_position(): @cbook.deprecated # 3.3
colorbar_factory(): @cbook.deprecated # Colorbar
config_axis(): @cbook.deprecated # 3.3
on_mappable_changed(): @cbook.deprecated # update_normal
update_bruteforce(): ~destroy and rebuild the colorbar. this is intended to become obsolete, and will probably be deprecated and then removed. it is not called when the pyplot.colorbar function or the figure.colorbar method are used to create the colorbar., @cbook.deprecated # update_normal
mx2num(): @cbook.deprecated # 3.2
illegal_s(): @cbook.deprecated # 3.3
from_params(): @cbook.deprecated # assign to the params attribute
add_axes(): ~notes ----- if the figure already has an axes with key (*args*, *kwargs*) then it will simply make that axes current and return it. this behavior is deprecated. meanwhile, if you do not want this behavior (i.e., you want to force the creation of a new axes), you must use a unique set of args and kwargs. the axes *label* attribute has been exposed for this purpose: if you want two axes that are otherwise identical to be added to the figure, make sure you give them unique labels.
add_subplot(): ~notes ----- if the figure already has a subplot with key (*args*, *kwargs*) then it will simply make that subplot current and return it. this behavior is deprecated. meanwhile, if you do not want this behavior (i.e., you want to force the creation of a new subplot), you must use a unique set of args and kwargs. the axes *label* attribute has been exposed for this purpose: if you want two subplots that are otherwise identical to be added to the figure, make sure you give them unique labels.
savefig(): ~ this parameter is deprecated. this parameter is deprecated. this parameter is deprecated.
tight_layout(): ~parameters ---------- renderer : subclass of `~.backend_bases.rendererbase`, optional defaults to the renderer for the figure. deprecated. pad : float, default: 1.08 padding between the figure edge and the edges of subplots, as a fraction of the font size. h_pad, w_pad : float, default: *pad* padding (height/width) between edges of adjacent subplots, as a fraction of the font size. rect : tuple (left, bottom, right, top), default: (0, 0, 1, 1) a rectangle in normalized figure coordinates into which the whole subplots area (including labels) will fit.
get_rows_columns(): @cbook.deprecated # rowspan, colspan
ship(): @cbook.deprecated # 3.4
to_mask(): @cbook.deprecated # mathtext.math_to_image
to_rgba(): @cbook.deprecated # mathtext.math_to_image
to_png(): @cbook.deprecated # mathtext.math_to_image
get_depth(): @cbook.deprecated # mathtext.math_to_image
set_minimumdescent(): @cbook.deprecated # 3.4
get_minimumdescent(): @cbook.deprecated # 3.4
on_motion_blit(): @cbook.deprecated # self.on_motion
artist_picker(): @cbook.deprecated # self.ref_artist.contains
Shadow: ~parameters ---------- patch : `.patch` the patch to create the shadow for. ox, oy : float the shift of the shadow in data coordinates, scaled by a factor of dpi/72. props : dict *deprecated (use kwargs instead)* properties of the shadow patch. **kwargs properties of the shadow patch. supported keys are:
transmute(): @cbook.deprecated # 3.4
FancyArrowPatch: ~dpi_cor : float, default: 1 dpi_cor is currently used for linewidth-related things and shrink factor. mutation scale is affected by this. deprecated.
set_dpi_cor(): @cbook.deprecated # 3.4
get_dpi_cor(): @cbook.deprecated # 3.4
pan(): @cbook.deprecated # 3.3
zoom(): @cbook.deprecated # 3.3
cla(): @cbook.deprecated # ThetaAxis.clear()
pan(): @cbook.deprecated # 3.3
zoom(): @cbook.deprecated # 3.3
refresh(): @cbook.deprecated # 3.3
cla(): @cbook.deprecated # RadialAxis.clear()
set_ylim(): ~ymin, ymax : float, optional these arguments are deprecated and will be removed in a future version. they are equivalent to *bottom* and *top* respectively, and it is an error to pass both *ymin* and *bottom* or *ymax* and *top*.
axes(): ~notes ----- if the figure already has a axes with key (*args*, *kwargs*) then it will simply make that axes current and return it. this behavior is deprecated. meanwhile, if you do not want this behavior (i.e., you want to force the creation of a new axes), you must use a unique set of args and kwargs. the axes *label* attribute has been exposed for this purpose: if you want two axes that are otherwise identical to be added to the figure, make sure you give them unique labels.
subplot(): ~if the figure already has a subplot with key (*args*, *kwargs*) then it will simply make that subplot current and return it. this behavior is deprecated. meanwhile, if you do not want this behavior (i.e., you want to force the creation of a new subplot), you must use a unique set of args and kwargs. the axes *label* attribute has been exposed for this purpose: if you want two subplots that are otherwise identical to be added to the figure, make sure you give them unique labels.
quiverkey_doc(): @cbook.deprecated # 3.2
ax(): @cbook.deprecated # axes
validate_bool_maybe_none(): @cbook.deprecated # 3.3
_make_nseq_validator(): @cbook.deprecated # 3.3
validate_nseq_float(): @cbook.deprecated # 3.3
validate_nseq_int(): @cbook.deprecated # 3.3
_validate_mathtext_fallback_to_cm(): ~temporary validate for fallback_to_cm, while deprecated
validate_hinting(): @cbook.deprecated # 3.3
validate_movie_writer(): @cbook.deprecated # 3.3
validate_webagg_address(): @cbook.deprecated # 3.3
LogTransform(): @cbook.deprecated # scale.LogTransform
InvertedLogTransform(): @cbook.deprecated # scale.InvertedLogTransform
SymmetricalLogTransform(): @cbook.deprecated # scale.SymmetricalLogTransform
InvertedSymmetricalLogTransform(): @cbook.deprecated # scale.InvertedSymmetricalLogTransform
set_smart_bounds(): @cbook.deprecated # 3.2
get_smart_bounds(): @cbook.deprecated # 3.2
cla(): @cbook.deprecated # Spine.clear()
make_external_conversion_command(): @cbook.deprecated # 3.3
make_tex_preview(): @cbook.deprecated # 3.3
make_dvi_preview(): @cbook.deprecated # 3.3
matplotlib: ~parameters ---------- text : str the text of the annotation. *s* is a deprecated synonym for this parameter.
Annotation: ~parameters ---------- text : str the text of the annotation. *s* is a deprecated synonym for this parameter.
pan(): @cbook.deprecated # 3.3
zoom(): @cbook.deprecated # 3.3
refresh(): @cbook.deprecated # 3.3
Bbox: ~ the current behavior of `bbox.null()` may be surprising as it does not have all of the properties of the "empty set", and as such does not behave like a "zero" object in the mathematical sense. we may change that in the future (with a deprecation period).
inverse_transformed(): @cbook.deprecated # transformed(transform.inverted())
funcleft(): @cbook.deprecated # 3.3
funcright(): @cbook.deprecated # 3.3
funcbottom(): @cbook.deprecated # 3.3
functop(): @cbook.deprecated # 3.3
funcwspace(): @cbook.deprecated # 3.3
funchspace(): @cbook.deprecated # 3.3
destroy(): @cbook.deprecated # 3.4
destroy(): @cbook.deprecated # 3.4
figbox(): @cbook.deprecated # 3.4
update_params(): @cbook.deprecated # 3.4
get_geometry(): @cbook.deprecated # (get_subplotspec returns a SubplotSpec instance.)
change_geometry(): @cbook.deprecated # set_subplotspec
axes_grid1: ~parameters ---------- fig : `.figure` the parent figure. rect : (float, float, float, float) or int the axes position, as a ``(left, bottom, width, height)`` tuple or as a three-digit subplot position code (e.g., "121"). nrows_ncols : (int, int) number of rows and columns in the grid. ngrids : int or none, default: none if not none, only the first *ngrids* axes in the grid are created. direction : {"row", "column"}, default: "row" whether axes are created in row-major ("row by row") or column-major order ("column by column"). this also affects the order in which axes are accessed using indexing (``grid[index]``). axes_pad : float or (float, float), default: 0.02in padding or (horizontal padding, vertical padding) between axes, in inches. add_all : bool, default: true whether to add the axes to the figure using `.figure.add_axes`. this parameter is deprecated. share_all : bool, default: false whether all axes share their x- and y-axis. aspect : bool, default: true whether the axes aspect ratio follows the aspect ratio of the data limits. label_mode : {"l", "1", "all"}, default: "l" determines which axes will get tick labels:
Grid: ~parameters ---------- fig : `.figure` the parent figure. rect : (float, float, float, float) or int the axes position, as a ``(left, bottom, width, height)`` tuple or as a three-digit subplot position code (e.g., "121"). nrows_ncols : (int, int) number of rows and columns in the grid. ngrids : int or none, default: none if not none, only the first *ngrids* axes in the grid are created. direction : {"row", "column"}, default: "row" whether axes are created in row-major ("row by row") or column-major order ("column by column"). axes_pad : float or (float, float), default: 0.02 padding or (horizontal padding, vertical padding) between axes, in inches. add_all : bool, default: true whether to add the axes to the figure using `.figure.add_axes`. this parameter is deprecated. share_all : bool, default: false whether all axes share their x- and y-axis. overrides *share_x* and *share_y*. share_x : bool, default: true whether all axes of a column share their x-axis. share_y : bool, default: true whether all axes of a row share their y-axis. label_mode : {"l", "1", "all"}, default: "l" determines which axes will get tick labels:
ImageGrid: ~parameters ---------- fig : `.figure` the parent figure. rect : (float, float, float, float) or int the axes position, as a ``(left, bottom, width, height)`` tuple or as a three-digit subplot position code (e.g., "121"). nrows_ncols : (int, int) number of rows and columns in the grid. ngrids : int or none, default: none if not none, only the first *ngrids* axes in the grid are created. direction : {"row", "column"}, default: "row" whether axes are created in row-major ("row by row") or column-major order ("column by column"). this also affects the order in which axes are accessed using indexing (``grid[index]``). axes_pad : float or (float, float), default: 0.02in padding or (horizontal padding, vertical padding) between axes, in inches. add_all : bool, default: true whether to add the axes to the figure using `.figure.add_axes`. this parameter is deprecated. share_all : bool, default: false whether all axes share their x- and y-axis. aspect : bool, default: true whether the axes aspect ratio follows the aspect ratio of the data limits. label_mode : {"l", "1", "all"}, default: "l" determines which axes will get tick labels:
axes_grid1: ~parameters ---------- pad : float, default: 0 fraction of the axes height to put as padding. add_all : bool, default: true whether to add the {rgb, r, g, b} axes to the figure. this parameter is deprecated. axes_class : matplotlib.axes.axes
RGBAxes: ~parameters ---------- pad : float, default: 0 fraction of the axes height to put as padding. add_all : bool, default: true whether to add the {rgb, r, g, b} axes to the figure. this parameter is deprecated. axes_class : matplotlib.axes.axes
add_RGB_to_figure(): @cbook.deprecated # 3.3
parasite_axes_auxtrans_class_factory(): @cbook.deprecated # parasite_axes_class_factory
update_viewlim(): @cbook.deprecated # apply_aspect
update_viewlim(): @cbook.deprecated # apply_aspect
dpi_transform(): @cbook.deprecated # 3.3
set_factor(): @cbook.deprecated # 3.3
set_factor(): @cbook.deprecated # 3.3
